# -*- coding: utf-8 -*-
"""ANN_Perceptron.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZTBghNuy-O-QynqUWjgl-XvhYSGvMQKU
"""

import numpy as np

# Define the ASCII representation of digits 0-9
ascii_digits = np.array([
    [0, 0, 0, 0, 0, 0, 0],  # ASCII 0
    [0, 0, 0, 0, 0, 0, 1],  # ASCII 1
    [0, 0, 0, 0, 0, 1, 0],  # ASCII 2
    [0, 0, 0, 0, 0, 1, 1],  # ASCII 3
    [0, 0, 0, 0, 1, 0, 0],  # ASCII 4
    [0, 0, 0, 0, 1, 0, 1],  # ASCII 5
    [0, 0, 0, 0, 1, 1, 0],  # ASCII 6
    [0, 0, 0, 0, 1, 1, 1],  # ASCII 7
    [0, 0, 0, 1, 0, 0, 0],  # ASCII 8
    [0, 0, 0, 1, 0, 0, 1],  # ASCII 9
])

# Labels for the numbers: 1 for even, 0 for odd
labels = np.array([1, 0, 1, 0, 1, 0, 1, 0, 1, 0])  # even=1, odd=0

# Perceptron class definition
class Perceptron:
    def __init__(self, input_size, lr=0.1, epochs=100):
        self.W = np.zeros(input_size)
        self.b = 0
        self.lr = lr
        self.epochs = epochs

    def activation_fn(self, x):
        return 1 if x >= 0 else 0

    def predict(self, x):
        z = np.dot(x, self.W) + self.b
        return self.activation_fn(z)

    def train(self, X, y):
        for _ in range(self.epochs):
            print(self.W)
            print(self.b)
            for i in range(len(X)):
                y_pred = self.predict(X[i])
                self.W += self.lr * (y[i] - y_pred) * X[i]
                self.b += self.lr * (y[i] - y_pred)

# Initialize and train the perceptron
perceptron = Perceptron(input_size=7, epochs=10)
perceptron.train(ascii_digits, labels)

# Test the perceptron
test_digits = ['0', '3', '4', '9']
for digit in test_digits:
    ascii_input = np.array([int(b) for b in format(ord(digit), '07b')])
    result = perceptron.predict(ascii_input)
    print(f"Digit {digit} is {'even' if result == 1 else 'odd'}")