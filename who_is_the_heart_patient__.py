# -*- coding: utf-8 -*-
"""Who is the Heart Patient ?.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NE_uWCE2YGkQ0313HEWycdmKV-ebdlhc
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

heart_data = pd.read_csv('/content/heart_disease_data.csv')

heart_data.head()

heart_data.tail()

heart_data.shape

heart_data.info()

heart_data.isnull().sum()

heart_data.describe()

#checking the distribution of target value
heart_data['target'].value_counts()

X = heart_data.drop(columns= 'target', axis =1)
Y = heart_data['target']

print (X)

print(Y)

#splitting the data into train and test # stratify is used so that there will be equal distribution 1 and 0 among tarin and test
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify =Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""M0del Training


Logistic Regression


```


"""

Model = LogisticRegression()

# training the model with logisticRegression model with Training data
Model.fit(X_train,Y_train)

#Model Evaluation

#Accuracy Score

# Accuracy on Training data
X_train_prediction = Model.predict(X_train)
training_data_accuracy =accuracy_score(X_train_prediction,Y_train)

print('accuracy rate :' ,training_data_accuracy )

# acurracy on test Data
X_test_prediction = Model.predict(X_test)
testing_data_accuracy =accuracy_score(X_test_prediction,Y_test)

print('accuracy rate :' ,testing_data_accuracy )

"""Buliding a predictive system"""

input_data = (41, 0, 130, 204, 0, 0, 172, 0, 1.4, 2, 0, 2)

# Convert the input data into a NumPy array from a tuple
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Convert the data type to float if necessary
input_data_reshaped = input_data_reshaped.astype(float)

# Assuming Model is defined and trained
prediction = model.predict(input_data_reshaped)

print(prediction)

if (prediction[0]== 0):
  print ('the person does not have a heart disease')
else:
  print ('the person  has a heart disease ')

