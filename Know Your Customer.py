# -*- coding: utf-8 -*-
"""Customer Churn Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZP7_Xl9ECH36d4jJYX2psXXqN7pmq4QC
"""

import pandas as pd
from sklearn.model_selection  import train_test_split

df = pd.read_csv('/content/Churn_Modelling.csv')

df.head()

df.shape

df.head()

df.info()

df.describe()

df.duplicated().sum()

df.isnull().sum()

df['Exited'].value_counts()

df['Geography'].value_counts()



df['Geography'].value_counts()

df['Geography'] = df['Geography'].replace({'Germany' :1,'Spain': '2','France':'3'})

df.head()

df.head()

df.shape

df['Gender'] = df['Gender'].replace({'Male' :1,'Female': '0'})

df.head()

df.tail()

X_train.shape

X

Y

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled =scaler.fit_transform(X_test)

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

X_train_scaled

"""Making of a Neural Network"""

model = Sequential()

model.add(Dense(3,activation ='sigmoid',input_dim = 10))
model.add(Dense(3,activation ='sigmoid',input_dim = 10)) # increasing the layers
model.add(Dense(1,activation ='sigmoid'))

# we can experiment by increasing the layers and changing the activation which one works the best

model.summary()

"""Compilation"""

model.compile(loss ='binary_crossentropy',optimizer ='Adam')

# we can see the accuracy  as well
model.compile(loss ='binary_crossentropy',optimizer ='Adam',metrics =['accuracy'])

history = model.fit(X_train_scaled, Y_train, epochs=10)
history = model.fit(X_train_scaled, Y_train, epochs=100 ,validation_split =0.2)

# we can put validation point which acts as train test split

model.layers[0].get_weights()

model.layers[1].get_weights()

model.predict(X_test_scaled)

y_log = model.predict(X_test_scaled)

import numpy as np

y_pred = np.where(y_log > 0.5 ,1,0)

from sklearn.metrics import accuracy_score
accuracy_score(Y_test,y_pred)

import matplotlib.pyplot as plt

history.history

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.plot(history.history['accuarcy'])
plt.plot(history.history['val_accuarcy'])