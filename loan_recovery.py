# -*- coding: utf-8 -*-
"""Loan Recovery.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z-6wtKGbCOfEGRkuacTc3K6-mcv98Ine
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

loan = pd.read_csv('/content/train_u6lujuX_CVtuZ9i.csv')

loan.head()

loan.tail()

loan.shape

loan.isnull().sum()

"""handling missing values"""

# using median
loan['Credit_History'].fillna(loan['Credit_History'].median(),inplace =True)
loan['Loan_Amount_Term'].fillna(loan['Loan_Amount_Term'].median(),inplace =True)
loan['LoanAmount'].fillna(loan['LoanAmount'].median(),inplace =True)

loan.isnull().sum()

loan['Gender'].fillna(loan['Gender'].mode()[0],inplace =True)
loan['Married'].fillna(loan['Married'].mode()[0],inplace =True)
loan['Dependents'].fillna(loan['Dependents'].mode()[0],inplace =True)
loan['Self_Employed'].fillna(loan['Self_Employed'].mode()[0],inplace =True)

loan.isnull().sum()

loan.head()

"""differentiating the numbers and categoriacal data"""

loan_cat = loan.select_dtypes(include=['object'])
loan_num = loan.select_dtypes(include=['number'])

loan_cat

loan.iloc[:,1:3]

#from sklearn.model_selection import train_test_split
#X_train,X_test,y_train,y_test =train_test_split(loan.iloc[:,1:3],loan.iloc[:,-1],test_size =0.2)

#from sklearn.preprocessing import OrdinalEncoder

#X_train

#oe = OrdinalEncoder(categories = [['Male','Female'],['Yes','No']])

#oe.fit(X_train)

#X_train =oe.transform(X_train)

#X_train

from sklearn.preprocessing import OrdinalEncoder

# Initialize OrdinalEncoder
encoder = OrdinalEncoder()

# Fit and transform the categorical columns
loan[['Married', 'Gender','Self_Employed','Education','Property_Area']] = encoder.fit_transform(loan[['Married', 'Gender','Self_Employed','Education','Property_Area']])

loan.head()

loan =loan.replace(to_replace = '3+' ,value =4)

loan.head()

loan.tail()

loan = loan.replace(to_replace="Y",value =1)
loan = loan.replace(to_replace="N",value =0)

loan.head()

X = loan.drop(['Property_Area\t','Loan_Status','Loan_ID'],axis =1)
Y = loan['Loan_Status']

"""splitting the data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size =0.2,random_state =2)

"""Model Training"""

model =LogisticRegression()

model.fit(X_train,Y_train)

"""Model Evaluation"""

# Prediction
t_model = model.predict(X_train)

t_a_model =accuracy_score(t_model,Y_train)

print("Accuracy of the model :",t_a_model)

"""accuracy for test data"""

t_model = model.predict(X_test)
t_b_model = accuracy_score(t_model,Y_test)

print("Accuracy of the model :",t_b_model)

