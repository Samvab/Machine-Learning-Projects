# -*- coding: utf-8 -*-
"""DL Project 2 MNIST Classification in Neural Network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_WOst4JKi0nShbtunrAH_7SoMlFEGEI3
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras
from keras.datasets import mnist
from tensorflow.math import confusion_matrix

"""Loading MNIST data from keras.datasets"""

(X_train ,Y_train) , (X_test,Y_test) = mnist.load_data()

type(X_train)

# shape of the numpy arrays
print(X_train.shape ,Y_train.shape,X_test.shape,Y_test.shape)

# printing the 10 th image
print(X_train[10])

# displaying the image
plt.imshow(X_train[50])
plt.show()
#print the corresponding label
print(Y_train[50])

"""Images Labels"""

print(Y_train.shape,Y_test.shape)

# Unique Values in Y_train
print(np.unique(Y_train))

#unique Values in Y_test
print(np.unique(Y_test))

"""All the images have the same dimension inthis data  state"""

#scaling the values # Normalization

X_train= X_train/255
X_test =X_test/255

print(X_train[10])

"""Building the Neural Network"""

# setrting the layers of thr neural Networks
model = keras.Sequential([
                          keras.layers.Flatten(input_shape=(28,28)),
                          keras.layers.Dense(50,activation ='relu'),
                          keras.layers.Dense(50,activation='relu'),
                          keras.layers.Dense(10,activation ='sigmoid')
])

# compiling the loss
model.compile(optimizer ='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics =['accuracy'])

# training the neural Network ,loss = Real Value - Predicted value

model.fit(X_train, Y_train, epochs=10)

"""Training Data accuracy = 98.8%

Accuracy on test Data
"""

loss ,accuracy =model.evaluate(X_test,Y_test) # the model will take the X _test alone and compare it with Y test which is the real labels
print(accuracy)

"""Test Data Accurracy  =97.3%

"""

print(X_test.shape )

plt.imshow(X_test[0])
plt.show()

print(Y_test[0])

Y_pred =model.predict(X_test)

print(Y_pred.shape)

print(Y_pred[0])

"""1.8741185e-02  probability of being 0

6.8725913e-04  probability of being 1 and so on

model.predict() gives the prediction of probability of each class for that data point
"""

# converting the predcition values to class labels
label_for_first_test_image = np.argmax(Y_pred[0])
print(label_for_first_test_image)

# converting the predcition values to class labels for all test data points
Y_pred_labels = [np.argmax(i) for i in Y_pred ]
print(Y_pred_labels)

print(Y_pred)

"""Y_test ---> True Labels

Y_pred_labels --> Predicted Labels

Confusion Matrix
"""

conf_mat = confusion_matrix(Y_test,Y_pred_labels )

print(conf_mat)

plt.figure(figsize =(15,7))
sns.heatmap(conf_mat,annot =True ,fmt ='d',cmap= 'Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

"""Building a predictive system"""

input_image_path ='file path of the picture'
input_image =cv2.imread(input_image_path)

type(input_image)

print(input_image)

cv2_imshow(input_image)

input_image.shape

"""converting from rgb to grayscale"""

grayscale =cv2.cvtColor(input_image,cv2.cv2.COLOR_RGB2GRAY)

input_image_resize =cv2.resize(grayscale,(28,28))