# -*- coding: utf-8 -*-
"""Spam Mail Identifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D65wsFYO9cxB1QC5SuDBPqp4CqkhcNEA
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

raw_mail_data =pd.read_csv('/content/mail_data.csv')

raw_mail_data.head()

raw_mail_data.tail()

raw_mail_data.shape

raw_mail_data.isnull().sum()

raw_mail_data.info()

raw_mail_data.describe()

raw_mail_data.size

# replace the null values with null string
mail_data =raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.head()

mail_data.shape

"""Label Encoding"""

#label spam mail as 0 ;ham mail as 1;
mail_data.loc[mail_data['Category']== 'spam','Category',] =0
mail_data.loc[mail_data['Category']== 'ham','Category',] =1

"""Spam will be represented by 0

ham -1
"""

#separating the data as texts and label
#Input value
X=mail_data['Message']

#Target Value
Y=mail_data['Category']

print(X)

print(Y)

"""Splitting the data into Train Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state =3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""Feature Extraction Changing text to Numeric or Feature Vectors that can be used as input to the logistic regression"""

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Convert Y_train and Y_test values to integers
Y_train = Y_train.astype(int)
Y_test = Y_test.astype(int)

print(X_train_features)

"""Logistic Regression"""

model =LogisticRegression()

#traiining the logistic Regression model with training data
model.fit(X_train_features,Y_train)

"""Evaluating the model"""

#prediction on Training the data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy on Training data :',accuracy_on_training_data)

#prediction on Testing the data
prediction_on_testing_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test,prediction_on_testing_data)

print('Accuracy on Testing data : ',accuracy_on_test_data )

"""Building Predictive System

"""

# Assuming feature_extraction and model are defined properly

input_mail = ["Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's"]

# Convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# Making prediction
prediction = model.predict(input_data_features)
print(prediction)
if(prediction[0]==1):
  print("ham mail")
else:
  print("spam Mail")

