# -*- coding: utf-8 -*-
"""Movie Recommendation System .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o-0sLX6i9Gk7H2X7h4009ufiAw0d5kEA
"""

#Content based Recommendation System
#Popularity Based recommendation System
#Collaborative Recommendation System

import numpy as np
import pandas as pd
import difflib  # when somenone will type  a wrong a movie name we have to recommend them a close to  movie name
from sklearn.feature_extraction.text import TfidfVectorizer # text data to meaningful data
from sklearn.metrics.pairwise import cosine_similarity # similar type of movies recommendation

movies_data = pd.read_csv('/content/movies.csv')

movies_data.head()

movies_data.tail()

movies_data.describe()

movies_data.info()

movies_data.shape

movies_data.isnull().sum()

# selecting the relevant Features
selected_features =['genres','keywords','tagline','cast','director']
print(selected_features)

# replacing the null Values with null strings # na means not available
for feature in selected_features:
  movies_data[feature] =movies_data[feature].fillna('')

#combining all 5 selected features
combined_features =movies_data['genres'] +' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

# converting the text to numerical
vectorizer =TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

print(feature_vectors)

"""Cosine Similarity"""

# getting the similarity Scores using cosine Similarity
similarity = cosine_similarity(feature_vectors)

print(similarity)

print(similarity.shape)

# getting a movie name from user

movie_name =input("Enter Your favourite movie nam :")

# creating a list with all the movie names given in the list


list_of_all_titles =movies_data['title'].tolist()
print(list_of_all_titles)

#finding the close match given by the user
find_match = difflib.get_close_matches(movie_name,list_of_all_titles)
print(find_match)

close_match =find_match[0]
print(close_match)

# find the index of the movie # mentioning   0  because it will be in list
index_of_movie = movies_data[movies_data.title == close_match]['index'].values[0]
print(index_of_movie)

# getting a list of similar movies enumerate is basically used to run a loop inside a list
similarity_score  =list(enumerate(similarity[index_of_movie]))
print(similarity_score)
#(0, 0.033570748780675445) 0 -> index ,0.033570748780675445->simlarity between the movies

len(similarity_score)

# arranging th movies from higher similarity to lower similarity # x[1] similarity value x[0] =index
sort_similar_movies =sorted(similarity_score,key =lambda x:x[1],reverse =True)
print(sort_similar_movies)

# print the name of similar movies
print('Movies suggested for you :  \n')

i =1
for movie in sort_similar_movies:
  index =movie[0]
  title_from_index =movies_data[movies_data.index ==index]['title'].values[0]
  if (i<11):
    print(i , '.',title_from_index)
    i+=1

"""***Movie Recommendation System***"""

movie_name =input('Enter your favourite name :')

list_of_all_titles =movies_data['title'].tolist()

find_match = difflib.get_close_matches(movie_name,list_of_all_titles)

close_match =find_match[0]

index_of_movie = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score  =list(enumerate(similarity[index_of_movie]))


sort_similar_movies =sorted(similarity_score,key =lambda x:x[1],reverse =True)

print("Movies suggested for you : \n" )

i =1
for movie in sort_similar_movies:
  index =movie[0]
  title_from_index =movies_data[movies_data.index ==index]['title'].values[0]
  if (i<11):
    print(i , '.',title_from_index)
    i+=1

