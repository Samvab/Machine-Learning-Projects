# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1akmbJY0jFwVZ42bY8MnREKuVQt5vzyVD
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

credit_card_data = pd.read_csv('/content/creditcard.csv')

credit_card_data.head()

credit_card_data.tail()

credit_card_data.shape

credit_card_data.info()

# distribution of legit transaction and fraud data
credit_card_data['Class'].value_counts()

# separating the data values to legit and fraud
legit  =credit_card_data[credit_card_data.Class == 0]
fraud = credit_card_data[credit_card_data.Class == 1]

print(legit.shape)
print(fraud.shape)

# statistical measures of data
legit.Amount.describe()
# table below describes the transaction -:25 percentie of the total transaction is less than 24 and so on

fraud.Amount.describe()

# compare the values for both transactions
credit_card_data.groupby('Class').mean()

"""In this situation were the data is so unbalanced there we can use ***UnderSampling*** where we create a sample data taking the same amount of data from the  bigger data which have the less amount of data"""

legit_sample = legit.sample(n= 3)

"""Concatenating two dataframes"""

new_dataset = pd.concat([legit_sample,fraud],axis =0)

new_dataset.head()

new_dataset.tail(

)

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""splitting the data into features and Targets"""

X = new_dataset.drop(columns= 'Class' ,axis  =1)
Y = new_dataset['Class']

print(X)

print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size = 0.2,stratify = Y,random_state = 2)

print(X.shape ,X_train.shape,X_test.shape)

"""Logistic regression"""

model = LogisticRegression()

# training the model with data
model.fit(X_train,Y_train)

"""Model Evaluation"""

# accuracy  on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('accuracy on training data :' ,training_data_accuracy)

# accuracy  on testing data
X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('accuracy on testing data :' ,testing_data_accuracy)

